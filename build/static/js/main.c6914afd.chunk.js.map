{"version":3,"sources":["components/FilterBar.jsx","components/Header.jsx","components/ItemCard.jsx","components/ItemGrid.jsx","components/Notification.jsx","services/products.js","components/App.jsx","index.jsx"],"names":["FilterBar","filters","defineFilter","className","map","filter","key","onClick","toUpperCase","Header","props","style","textAlign","title","ItemCard","product","deleteProduct","useState","quantity","setQuantity","name","id","checkPropTypes","PropTypes","object","isRequired","ItemGrid","prods","products","Notification","message","console","log","baseUrl","axios","get","then","response","data","newObject","post","delete","App","setProducts","newProduct","setNewProduct","setFilter","setMessage","useEffect","productService","allProducts","onSubmit","event","preventDefault","category","concat","value","onChange","target","length","type","catch","error","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6914afd.chunk.js","sourcesContent":["import React from 'react';\nimport './filterBar.css';\n\nconst FilterBar = ( {filters, defineFilter} ) => {\n  return(\n    <div className=\"filter-bar\">\n      {filters.map((filter) => (\n        <span key={filter} className=\"filter-button\" onClick={() => defineFilter(filter)}>{filter.toUpperCase()}</span>\n      ))}\n    </div>\n  )\n}\n\nexport default FilterBar;\n","import React from 'react';\n\nconst Header = (props) => {\n  return(\n    <h1 style={{ textAlign: 'center' }}>{props.title}</h1>\n  )\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './itemCard.css';\n\nconst ItemCard = ({ product, deleteProduct }) => {\n  const MAX_QUANTITY = 99;\n  const [quantity, setQuantity] = useState(product.quantity);\n  const { name } = product;\n\n  const increaseByOne = () => {\n    if (quantity < MAX_QUANTITY) {\n      setQuantity(quantity + 1);\n    }\n  };\n  const decreaseByOne = () => {\n    if (quantity > 0) {\n      setQuantity(quantity - 1);\n    }\n  };\n\n  return (\n    <div className=\"itemCard\">\n      <div className=\"name\" onClick={increaseByOne} >{name.toUpperCase()}</div>\n      <div className=\"controls\">\n        <div className=\"noselect\" onClick={() => deleteProduct(product.id)}>X</div>\n        <div className=\"quantity noselect\" onClick={decreaseByOne}>{quantity}</div>\n      </div>\n    </div>\n  );\n};\n\nItemCard.checkPropTypes = {\n  product: PropTypes.object.isRequired,\n};\n\nexport default ItemCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ItemCard from './ItemCard';\nimport './itemGrid.css';\n\nconst ItemGrid = ({ products, deleteProduct }) => {\n\n  const populateProductCards = (prods) => (\n    <>\n      {prods.map((product) => (\n        <ItemCard key={product.id} product={product} deleteProduct={deleteProduct} />\n      ))}\n    </>\n  );\n\n  return (\n    <div id=\"itemGrid\">\n      { populateProductCards(products) }\n    </div>\n  );\n};\n\nItemGrid.propTypes = {\n  products: PropTypes.array.isRequired,\n};\n\nexport default ItemGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './notification.css';\n\nconst Notification = ( {message} ) => {\n  console.log(message);\n\n  return (\n    <div className=\"message\">{ message }</div>\n  );\n};\n\nNotification.propTypes = {\n  errorMessage: PropTypes.string,\n};\n\nexport default Notification;\n","import axios from 'axios'\nconst baseUrl = '/api/products'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then(response => response.data);\n}\n\nconst deleteProduct = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`);\n  return request.then( () => id);\n}\n\nexport default { getAll, create, update, deleteProduct }","import './App.css';\nimport FilterBar from './FilterBar';\nimport Header from './Header';\nimport ItemGrid from './ItemGrid';\nimport Notification from './Notification';\nimport productService from '../services/products'\nimport React, { useState, useEffect } from 'react';\n\nconst App = () => {\n  const title = 'Groceryio';\n  const MAX_PRODUCT_NAME_LENGTH = 28;\n  const CATEGORIES = [\n    \"all\",\n    \"produce\",\n    \"dairy\",\n    \"frozen\",\n    \"meat\",\n  ]\n  const [products, setProducts] = useState([])\n  const [newProduct, setNewProduct] = useState('')\n  const [filter, setFilter] = useState(\"all\")\n  const [message, setMessage] = useState('Enter a new product!')\n\n  const hook = () => {\n    productService\n      .getAll()\n      .then(allProducts => {\n        setProducts(allProducts)\n        setMessage('Products loaded!')\n      })\n  }\n\n  useEffect(hook, []) // [] specifies the effect to only run after first render\n\n  const productsToDisplay = () => {\n    if (filter === 'all') {\n      return products\n    }\n    else {\n      return products.filter((product) => product.category === filter)\n    }\n  }\n\n  const defineFilter = (category) => {\n    setFilter(category);\n    console.log(category);\n  }\n\n  const addProduct = (event) => {\n    event.preventDefault();\n    const productObj = {\n      name: newProduct,\n      category: 'produce',\n      quantity: 0\n    };\n    productService\n      .create(productObj)\n      .then(newProduct => {\n        setProducts(products.concat(newProduct));\n        setNewProduct('');\n        setMessage(`${newProduct.name} was added to your list.`)\n      })\n  }\n\n  const deleteProduct = (id) => {\n    productService\n      .deleteProduct(id)\n      .then(response => {\n        console.log('Product deleted. ID: ', response);\n        setProducts(products.filter(product => product.id !== id))\n      })\n      .catch(error => {\n        setMessage(`ERROR: The ID '${id}' is not a current or valid product ID.`)\n      })\n  }\n\n  const handleNewProductChange = (event) => {\n    if (event.target.value.length < MAX_PRODUCT_NAME_LENGTH) {\n      setNewProduct(event.target.value);\n      setMessage(``);\n    }\n    else {\n      setMessage(`The new product name you provided is too long. Please make it less than ${MAX_PRODUCT_NAME_LENGTH} characters.`);\n    }\n  }\n\n  return (\n    <div id=\"App\">\n      <Header title={title} />\n      <Notification message={message} />\n      <div id=\"productForm-container\">\n        <form id=\"productForm\" onSubmit={addProduct}>\n          <input value={newProduct} onChange={handleNewProductChange} />\n          <button type=\"submit\" id=\"submitProductButton\">Save</button>\n        </form>\n      </div>\n      <FilterBar filters={CATEGORIES} defineFilter={defineFilter} />\n      <ItemGrid products={productsToDisplay()} deleteProduct={deleteProduct} />\n    </div>\n  );\n};\n\nexport default App;\n","import App from './components/App'\nimport ReactDOM from 'react-dom'\nimport React from 'react';\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}